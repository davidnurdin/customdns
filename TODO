- probleme comment faire le test de connectivité depuis le container (qui a certe le network host + l'acces docker , mais n'arrive pas a acceder directement)
(j'était persuadé qu'on arrivais a acceder avec l'ip local du host, mais non)
===> piste (ouvrir un container sur le meme reseau, en cas de multiple réseau?): docker run --rm -it --network container:2389ec859e0b nicolaka/netshoot telnet localhost 3306
===> avoir 1 customDns par service ? on en aurai 1 pour keydb , 1 pour mysql, 1 pour redis, etc...) => mais je pense qu'on pourra pas a cause de l'ip local du host 172.xxx
===> avoir N container bridges qui fait les test de connectivité et qui renvoi les réponses (les lancer via docker run, via la socket docker..sur un port aléatoire et qu'il fasse un socat!)
==> trouver pour acceder depuis le host.


ce qui fonctionne :

 docker run -it --rm --network container:galera10-6_node.1.jth8hrfu9ib2xlisqgkibmold debian

=> donne accès au meme network que le service qu'on cherche à tester ! (il faut recupéré le container de l'host en cours)
=> on dois pouvoir faire ça via la socket unix => puis se connecter dedans => puis faire notre commande

---------------------

IDEE OK :

services:
  dnsproxy:
    image: ton/dnsproxy
    network_mode: "host"
    volumes:
      - /var/run/dns-helper.sock:/var/run/dns-helper.sock

  dns-helper:
    image: alpine
    command: ["sh", "-c", "apk add curl && nc -lU /var/run/dns-helper.sock"]
    networks:
      - default
    volumes:
      - /var/run/dns-helper.sock:/var/run/dns-helper.sock


on crée un dns helper (en deploy x 3 aussi) , qui rejoindra dynamiquement le réseau demandé par le customdns

=> les 2 communique via une socket unix (qui est un serveur SOCKS d'ailleur sur le helper) (la socks etant sur le host commun)
=> customDns peur faire joindre au dns helper des réseau dynamiquement via (voir api):

docker network connect <nom_du_reseau> <nom_du_conteneur>
docker network disconnect <nom_du_reseau> <nom_du_conteneur>


depuis host : sudo socat - UNIX-CONNECT:./dns-helper/helper.sock 

docker network connect test_test-network test_dns-helper.km9oevn9qvs6pyflqxogmsa6n.at303cm9zhxu2ikr4oklsmecs 


la communication pour me connecté à l'ip depuis customdns : (a adapté en reactphp)

$socket = stream_socket_client("unix:///var/run/dns-helper.sock", $errno, $errstr, 1);
fwrite($socket, "TEST 10.0.1.5:8080\n");
$response = fgets($socket);

sudo echo "TEST 10.0.0.2:8080" | sudo socat - UNIX-CONNECT:./dns-helper/helper.sock



et là ... on se retrouve connecté !

todo : verifié si /var/run/dns-helper permet plusieurs connexion (normalement oui)
---
autre piste => crée dans la stack du customdns => 1 service supplémentaire qu'on veux testé avec le network (et spécifié son nom en _env dans customdns)


- si un container du swarm interroge 172.17.0.1 , via tasksActive. il a acces a tout les service name du swarm qui sont interrogé , c est problematique
==> solution : il faudrais regarder la "source" de la requete dns , regarder les relations et autorisé que les network communs
- decoupler/utilisé cache l'interogation docker/la requete dns
- avoir un tasksActive.all/[node1/2/3].service plutot
- pouvoir specifié une URL de configuration pour le test de filtrage (sql/keydb/autre?) ca serai du php
- documenter comment utiliser le customdns dans les containers
- donner une priorité aux containers qui ont un network commun
- renvoyer toutes les réponses (answer) a 1 question (pas juste 1 seul)
- enlever les variable globale les encapsulé dans ServerExtended
- SI on demande un service qui n'existe pas, renvoyer une erreur NXDOMAIN not exist
